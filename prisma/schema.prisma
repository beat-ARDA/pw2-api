generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Zomrromr@localhost:3306/apicursos"
}

model users {
  userId                         Int                  @id @default(autoincrement())
  email                          String               @db.VarChar(50)
  pass                           String               @db.VarChar(100)
  userType                       String               @db.VarChar(50)
  firstNames                     String               @db.VarChar(100)
  lastNames                      String               @db.VarChar(100)
  imageProfile                   Bytes?
  gender                         String               @db.VarChar(10)
  birthdate                      DateTime             @db.Date
  registrationDate               DateTime             @default(now()) @db.DateTime(0)
  dateUpdate                     DateTime             @default(now()) @updatedAt @db.DateTime(0)
  attemps                        Int                  @default(0)
  comentarios                    comentarios[]
  cursoalumno                    cursoalumno[]
  cursos                         cursos[]
  mensajes_mensajes_user1Tousers mensajes[]           @relation("mensajes_user1Tousers")
  mensajes_mensajes_user2Tousers mensajes[]           @relation("mensajes_user2Tousers")
  nivelcursoalumno               nivelcursoalumno[]
  seccioncursoalumno             seccioncursoalumno[]
  secciones                      secciones[]
  videos                         videos[]
}

model categorias {
  idCategoria Int                @id @default(autoincrement())
  descripcion String             @db.VarChar(100)
  nombre      String             @db.VarChar(50)
  fecha       DateTime           @default(now()) @db.DateTime(0)
  deleted     Boolean?           @default(dbgenerated("b'0'")) @db.Bit(1)
  activo      Boolean?           @default(true)
  curso       categoriascursos[]
}

model categoriascursos {
  idCategoriaCurso  Int        @id @default(autoincrement())
  curso             Int
  categoria         Int
  fecha             DateTime   @default(now()) @db.DateTime(0)
  curso_detalle     cursos     @relation(fields: [curso], references: [idCurso], onDelete: NoAction, onUpdate: NoAction, map: "categoriascursos_ibfk_1")
  categoria_detalle categorias @relation(fields: [categoria], references: [idCategoria], onDelete: NoAction, onUpdate: NoAction, map: "categoriascursos_ibfk_2")

  @@index([categoria], map: "categoria")
  @@index([curso], map: "curso")
}

model comentarios {
  idComentario Int      @id @default(autoincrement())
  idCurso      Int
  idUsuario    Int
  comentario   String   @db.VarChar(500)
  calificaion  Int
  fecha        DateTime @default(now()) @db.DateTime(0)
  cursos       cursos   @relation(fields: [idCurso], references: [idCurso], onDelete: NoAction, onUpdate: NoAction, map: "comentarios_ibfk_1")
  users        users    @relation(fields: [idUsuario], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "comentarios_ibfk_2")

  @@index([idCurso], map: "idCurso")
  @@index([idUsuario], map: "idUsuario")
}

model cursoalumno {
  idCursoAlumno     Int      @id @default(autoincrement())
  curso             Int
  alumno            Int
  compro_completo   Boolean
  termino_curso     Boolean
  fecha_terminacion Float?   @db.Float
  fecha_registro    DateTime @default(now()) @db.DateTime(0)
  forma_pago        String   @db.VarChar(50)
  cantidad_pagada   Float?   @db.Float
  cursos            cursos   @relation(fields: [curso], references: [idCurso], onDelete: NoAction, onUpdate: NoAction, map: "cursoalumno_ibfk_1")
  users             users    @relation(fields: [alumno], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "cursoalumno_ibfk_2")

  @@index([alumno], map: "alumno")
  @@index([curso], map: "curso")
}

model cursos {
  idCurso            Int                  @id @default(autoincrement())
  cost               Float?               @db.Float
  descripcion        String               @db.VarChar(100)
  promedio           Int                  @default(0)
  imagen             Bytes?
  titulo             String               @db.VarChar(100)
  activo             Boolean?             @default(true)
  instructor         Int
  fecha_creacion     DateTime             @default(now()) @db.DateTime(0)
  categoriaCursos    categoriascursos[]
  comentarios        comentarios[]
  cursoalumno        cursoalumno[]
  users              users                @relation(fields: [instructor], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "cursos_ibfk_1")
  nivelcurso         nivelcurso[]
  nivelcursoalumno   nivelcursoalumno[]
  seccioncursoalumno seccioncursoalumno[]
  secciones          secciones[]

  @@index([instructor], map: "instructor")
}

model nivelcurso {
  idNivelCurso       Int                  @id @default(autoincrement())
  curso              Int
  costo              Float?               @db.Float
  titulo             String               @db.VarChar(100)
  cursos             cursos               @relation(fields: [curso], references: [idCurso], onDelete: NoAction, onUpdate: NoAction, map: "nivelcurso_ibfk_1")
  nivelcursoalumno   nivelcursoalumno[]
  seccioncursoalumno seccioncursoalumno[]
  secciones          secciones[]

  @@index([curso], map: "curso")
}

model nivelcursoalumno {
  idNivelCursoAlumno   Int        @id @default(autoincrement())
  nivel                Int
  alumno               Int
  termino              Boolean    @default(false)
  fecha_ultimo_ingreso DateTime   @default(now()) @db.DateTime(0)
  curso                Int?
  cursos               cursos?    @relation(fields: [curso], references: [idCurso], onDelete: NoAction, onUpdate: NoAction, map: "curso")
  nivelcurso           nivelcurso @relation(fields: [nivel], references: [idNivelCurso], onDelete: NoAction, onUpdate: NoAction, map: "nivelcursoalumno_ibfk_1")
  users                users      @relation(fields: [alumno], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "nivelcursoalumno_ibfk_2")

  @@index([alumno], map: "alumno")
  @@index([nivel], map: "nivel")
  @@index([curso], map: "curso")
}

model secciones {
  idSecciones        Int                  @id @default(autoincrement())
  nivel              Int
  titulo             String               @db.VarChar(100)
  contenido          Bytes?
  idUsuario          Int
  fecha              DateTime             @default(now()) @db.DateTime(0)
  video              String?              @db.VarChar(250)
  link               String?              @db.VarChar(250)
  curso_id           Int?
  mime               String?              @db.VarChar(100)
  seccioncursoalumno seccioncursoalumno[]
  cursos             cursos?              @relation(fields: [curso_id], references: [idCurso], onDelete: NoAction, onUpdate: NoAction, map: "curso_id")
  nivelcurso         nivelcurso           @relation(fields: [nivel], references: [idNivelCurso], onDelete: NoAction, onUpdate: NoAction, map: "secciones_ibfk_1")
  users              users                @relation(fields: [idUsuario], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "secciones_ibfk_2")
  videos             videos[]

  @@index([idUsuario], map: "idUsuario")
  @@index([nivel], map: "nivel")
  @@index([curso_id], map: "curso_id")
}

model videos {
  idVideo   Int       @id @default(autoincrement())
  video     Bytes     @db.Blob
  idSeccion Int
  idUsuario Int
  fecha     DateTime  @default(now()) @db.DateTime(0)
  secciones secciones @relation(fields: [idSeccion], references: [idSecciones], onDelete: NoAction, onUpdate: NoAction, map: "videos_ibfk_1")
  users     users     @relation(fields: [idUsuario], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "videos_ibfk_2")

  @@index([idSeccion], map: "idSeccion")
  @@index([idUsuario], map: "idUsuario")
}

model mensajes {
  idMensaje                   Int      @id @default(autoincrement())
  user1                       Int
  user2                       Int
  mensaje                     String   @db.VarChar(500)
  fecha                       DateTime @default(now()) @db.DateTime(0)
  users_mensajes_user1Tousers users    @relation("mensajes_user1Tousers", fields: [user1], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "mensajes_ibfk_1")
  users_mensajes_user2Tousers users    @relation("mensajes_user2Tousers", fields: [user2], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "mensajes_ibfk_2")

  @@index([user1], map: "user1")
  @@index([user2], map: "user2")
}

model seccioncursoalumno {
  id_seccion_curso_alumno Int        @id @default(autoincrement())
  nivel                   Int
  alumno                  Int
  seccion                 Int
  termino_seccion         Int?       @default(0) @db.TinyInt
  fecha_registro          DateTime?  @default(now()) @db.DateTime(0)
  fecha_termino           DateTime?  @db.Date
  curso                   Int?
  cursos                  cursos?    @relation(fields: [curso], references: [idCurso], onDelete: NoAction, onUpdate: NoAction, map: "id_curso")
  nivelcurso              nivelcurso @relation(fields: [nivel], references: [idNivelCurso], onDelete: NoAction, onUpdate: NoAction, map: "seccioncursoalumno_ibfk_1")
  users                   users      @relation(fields: [alumno], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "seccioncursoalumno_ibfk_2")
  secciones               secciones  @relation(fields: [seccion], references: [idSecciones], onDelete: NoAction, onUpdate: NoAction, map: "seccioncursoalumno_ibfk_3")

  @@index([alumno], map: "alumno")
  @@index([curso], map: "id_curso")
  @@index([nivel], map: "nivel")
  @@index([seccion], map: "seccion")
}
